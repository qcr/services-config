#!/bin/bash
#
#
# Sets the default services to the current user configuration

#################
### VARIABLES ###
#################

# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"



#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nSets the default services based on the current user configuration. Must be run
    whenever a services configuration file is updated.
    
Usage:
    update [-C|--command <file>] [-c|--config <file>] [-h|--help] [-p|--path <path>] [-P|--ConfigPath <file>] [-T|--testing] [-u|--user <user>]

Input Arguments:
    -C|--command  <file>    The file where generated commands should be stored. Defaults to /tmp/ros-service-commands
    -c|--config   <file>    The config file to use for service configuration. Defaults to /home/<service_user>/.qcr/ros-service-config.yml. Providing this argument will set the config file path irrespective of the argument provided as the service_user.
    -h|--help               Shows this help menu.
    -p|--path     <path>    The path to where systemd service files are stored. Defaults to /etc/systemd/system
    -P|--ConfigPath  <file> The location where the current config being used is stored. Defaults to /etc/qcr/ros-service-config.yml
    -T|--testing            Runs the script in a test mode by prepending all paths and setting the current user to test. No changes to the system services will actually occur.
    -u|--user     <user>    The username of the configuration file to be used. The username will also be added to each generated service. Defaults to the current user.
    
Example Usage:
    Use your service configuration: ./update
    Use the qcr user's service configuration: ./update -u qcr

"
}

function _run_systemctl_commands() {
    while read -r sys_cmd; do
        # Get name of service and check file exists before running command
        srv="$(echo ${sys_cmd} | cut -d' ' -f4)"
        if [ -e ${SERVICE_PATH}/${srv}.service ]; then
            eval ${sys_cmd}
        fi
    done < "$1"
}


############
### MAIN ### 
############

# Source common components
source ${SCRIPT_DIR}/common

# Parse Arguments
TESTING=false
CONFIG_FILE_PROVIDED=false
PARSED_ARGS=$(getopt -a -n ${SCRIPT_NAME} -o 'c:d:hTu:' --long 'default:,config:,help,testing,user' -- "$@")
eval set -- "${PARSED_ARGS}"
while true; do
    case "$1" in 
        -C|--command) COMMAND_FILE=$2; shift 1 ;;
        -c|--config) CONFIG_FILE=$2; CONFIG_FILE_PROVIDED=true; shift 2 ;;
        -h|--help) print_usage; exit 0 ;;
        -p|--path) SERVICE_PATH=$2; shift 2 ;;
        -P|--ConfigPath) CURRENT_CONFIG_FILE=$2; shift 2 ;;
        -T|--testing) TESTING=true; shift 1 ;;
        -u|--user) SERVICE_USER=$2; shift 2 ;;
        # -- indicates end of arguments, break while loop
        --) shift; break ;;
        # invalid option was passed, print usage
        *)
        printf "${ERROR}Unrecognized option '$1'\n" 
        print_usage 
        exit 1 ;;    
    esac
done

# Set service user to test if testing
# if [ ${TESTING} == true ]; then
#     SERVICE_USER="test"
# fi

# Create path to config file - based on config_file and service_user arguments
if [ ${CONFIG_FILE_PROVIDED} == false ]; then
    CONFIG_FILE="/home/${SERVICE_USER}/.qcr/service-config.yml"
fi


# Testing - prepend paths and set user
if [ ${TESTING} == true ]; then
    # Get path to testing directory
    TEST_DIR=$(_get_test_dir)

    # Set variables
    COMMAND_FILE=${TEST_DIR}/${COMMAND_FILE}
    CONFIG_FILE=${TEST_DIR}/${CONFIG_FILE}
    CURRENT_CONFIG_FILE=${TEST_DIR}/${CURRENT_CONFIG_FILE}
    CURRENT_CONFIG_DETAILS=${TEST_DIR}/${CURRENT_CONFIG_DETAILS}
    SERVICE_PATH=${TEST_DIR}/${SERVICE_PATH}   

    printf "${YELLOW}Running script in test mode. Creating test file structure.${RESET}\n\n"
    _create_test_folder_structure ${TEST_DIR}
fi


# Check to see if configuration file exists
if [ ! -e ${CONFIG_FILE} ]; then
    printf "${ERROR} The configuration file (${CONFIG_FILE}) does not exit. It is recommended you create a configuration file based on the default config. Use the 'services new' command.\n"
    exit 1
fi

# Check to see if a current config file exists
if [ -e ${CURRENT_CONFIG_FILE} ]; then

    # Get previous user
    PREV_USER=$(head -n 1 ${CURRENT_CONFIG_DETAILS})

    # Create list of commands to disable all services for previous user
    printf "${INFO} Disabling current services.\n"
    bash -c "python3 ${SCRIPT_DIR}/create_enable_services_list.py -D -c ${COMMAND_FILE} -f ${CURRENT_CONFIG_FILE} -u ${PREV_USER}"

    # Run commands - if not testing
    if [ ${TESTING} == false ]; then
        _run_systemctl_commands $COMMAND_FILE
    fi

    # Remove all service files for previous user
    SERVICE_FILES=${SERVICE_PATH}/*${PREV_USER}.service
    sudo rm ${SERVICE_FILES}

fi

# Set new configuration file
printf "${INFO} Setting new configuration file.\n"
sudo cp ${CONFIG_FILE} ${CURRENT_CONFIG_FILE}

# Create new service files for new configuration
printf "${INFO} Generating new and updated service files.\n"
sudo -E bash -c "python3 ${SCRIPT_DIR}/create_service_files.py -f ${CURRENT_CONFIG_FILE} -p ${SERVICE_PATH} -u ${SERVICE_USER}"

# Create list of commands to enable/disable services for current configuration
printf "${INFO} Enabling/disabling required services.\n"
bash -c "python3 ${SCRIPT_DIR}/create_enable_services_list.py -c ${COMMAND_FILE} -f ${CURRENT_CONFIG_FILE}  -u ${SERVICE_USER}"

# Run commands - if not testing
if [ ${TESTING} == false ]; then
    _run_systemctl_commands $COMMAND_FILE
fi

# Store current user and config file location
touch ${CURRENT_CONFIG_DETAILS}
echo ${SERVICE_USER} > ${CURRENT_CONFIG_DETAILS}
echo ${CONFIG_FILE} >> ${CURRENT_CONFIG_DETAILS}
