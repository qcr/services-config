#!/bin/bash
#
#
# Creates a new user configuration based on the system default.

#################
### VARIABLES ###
#################

# The name of this script, and the directory where it is located
SCRIPT_NAME="$(basename $(readlink -f $0))"
SCRIPT_DIR="$(dirname $(readlink -f $0))"

# EXAMPLE DEFAULT CONFIG
EXAMPLE_DEFAULT_CONFIG="$(dirname ${SCRIPT_DIR})/service-config_default.yml"

#################
### FUNCTIONS ###
#################

function print_usage(){
    printf "\nCopies the default service configuration to the current user workspace.
    
Usage:
    new [-c|--config <file>] [-d|--default <file>] [-h|--help] [-T|--testing] [-u|--user <service user>]

Input Arguments:
    -c|--config  <file>     The location where the new config file is to be stored. Defaults to /home/<current-user>/.qcr/ros-service-config.yml
    -d|--default <file>     The location to where the default config file. Defaults to /etc/qcr/ros-service-config_default.yml
    -h|--help               Shows this help menu.
    -T|--testing            Runs the script in a test mode by prepending all paths and setting the current user to test.
    -u|--user     <user>    The username of the configuration file to be used. The username will also be added to each generated service. Defaults to the current user.
"
}


############
### MAIN ### 
############

# Set shell options, enter help set in terminal for definitions
set -o pipefail

# Source common components
source ${SCRIPT_DIR}/common

# Parse Arguments
TESTING=false
PARSED_ARGS=$(getopt -a -n ${SCRIPT_NAME} -o 'c:d:hTu:' --long 'default:,config:,help,testing,user' -- "$@")
eval set -- "${PARSED_ARGS}"
while true; do
    case "$1" in 
        -c|--config) CONFIG_FILE=$2; shift 2 ;;
        -d|--default) DEFAULT_CONFIG_FILE=$2; shift 2 ;;
        -h|--help) print_usage; exit 0 ;;
        -T|--testing) TESTING=true; shift 1 ;;
        -u|--user) SERVICE_USER=$2; shift 2 ;;
        # -- indicates end of arguments, break while loop
        --) shift; break ;;
        # invalid option was passed, print usage
        *)
        printf "${ERROR}Unrecognized option '$1'\n" 
        print_usage 
        exit 1 ;;    
    esac
done

# Set service user to test if testing
# if [ ${TESTING} == true ]; then
#     SERVICE_USER="test"
# fi

# Testing - prepend paths and set user
if [ ${TESTING} == true ]; then
    # Get path to testing directory
    TEST_DIR=$(_get_test_dir)

    # Set variables
    CONFIG_FILE=${TEST_DIR}/home/${SERVICE_USER}/.qcr/service-config.yml
    DEFAULT_CONFIG_FILE=${TEST_DIR}/${DEFAULT_CONFIG_FILE}

    printf "${YELLOW}Running script in test mode. Creating test file structure.${RESET}\n\n"
    _create_test_folder_structure ${TEST_DIR}
fi


# Check directory exists
CONFIG_DIR=$(dirname ${CONFIG_FILE})
if [ ! -d ${CONFIG_DIR} ]; then
    printf "${INFO} Creating directory ${CONFIG_DIR}\n"
    mkdir -p "${CONFIG_DIR}"
fi

# Check if config already exists
if [ -e ${CONFIG_FILE} ]; then
    printf "${ERROR} User Configuration File Already Exists at ${CONFIG_FILE}.\n"
    printf "Please delete this file and then re-run this command.\n"
    exit 1
fi

# Check if default exists
if [ ! -e ${DEFAULT_CONFIG_FILE} ]; then
    printf "${INFO} No Default Configuration Exists, creating default configuration by copying ${EXAMPLE_DEFAULT_CONFIG}.\n"

    # Make sure directory exists
    DEFAULT_CONFIG_DIR="$(dirname ${DEFAULT_CONFIG_FILE})"
    if [ ! -d ${DEFAULT_CONFIG_DIR} ]; then
        echo "${INFO} Creating directory ${DEFAULT_CONFIG_DIR}"
        mkdir -p "${DEFAULT_CONFIG_DIR}"
    fi

    # Copy example to default
    sudo cp ${EXAMPLE_DEFAULT_CONFIG} ${DEFAULT_CONFIG_FILE}
    
fi

# Copy default to user
cp ${DEFAULT_CONFIG_FILE} ${CONFIG_FILE}
printf "${INFO} Copied Default Configuration - User configuration file at ${CONFIG_FILE}\n"
printf  "${INFO} Make changes to this file and then run update to set this as the default service configuration.\n"